name: Test Swift SDK
on:
  workflow_run:
    workflows: ["Package FFI Engine (Darwin)"]
    types: [requested, completed]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to download prebuilt xcframework (e.g. v0.10.0)"
        required: false
        type: string

permissions:
  contents: write
  id-token: write
  statuses: write

jobs:
  set-status:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == null }}
    steps:
      - name: Create Pending Status
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.workflow_run ? context.payload.workflow_run.head_sha : context.sha;
            const { owner, repo } = context.repo;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: sha,
              state: 'pending',
              context: 'Swift SDK Tests',
              description: 'Tests are running...',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });

  test:
    name: Integration Tests (Package FFI Engine)
    runs-on: macos-14
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 20
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4

      - name: Install Flipt
        uses: flipt-io/setup-action@v0.4.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.FLIPT_RELEASE_BOT_APP_ID }}
          private-key: ${{ secrets.FLIPT_RELEASE_BOT_APP_PEM }}

      - name: Download Artifact (iOS arm64)
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          name: flipt-engine-ffi-iOS-aarch64.tar.gz
          path: /tmp
          run-id: ${{ github.event.workflow_run.id }}

      - name: Download Artifact (iOS arm64 sim)
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          name: flipt-engine-ffi-iOS-aarch64-sim.tar.gz
          path: /tmp
          run-id: ${{ github.event.workflow_run.id }}

      - name: Download Artifact (Darwin arm64)
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          name: flipt-engine-ffi-Darwin-aarch64.tar.gz
          path: /tmp
          run-id: ${{ github.event.workflow_run.id }}

      # TODO: Add Darwin x86_64 artifact using lipo
      # https://developer.apple.com/forums/thread/666335
      # - name: Download Artifact (Darwin x86_64)
      #   uses: actions/download-artifact@v4
      #   with:
      #     github-token: ${{ steps.generate_token.outputs.token }}
      #     name: flipt-engine-ffi-Darwin-x86_64.tar.gz
      #     path: /tmp
      #     run-id: ${{ github.event.workflow_run.id }}

      - name: Extract Artifacts
        run: |
          mkdir -p /tmp/flipt-engine-ffi-iOS-aarch64
          mkdir -p /tmp/flipt-engine-ffi-iOS-aarch64-sim
          mkdir -p /tmp/flipt-engine-ffi-Darwin-aarch64

          tar -xzvf /tmp/flipt-engine-ffi-iOS-aarch64.tar.gz -C /tmp/flipt-engine-ffi-iOS-aarch64
          tar -xzvf /tmp/flipt-engine-ffi-iOS-aarch64-sim.tar.gz -C /tmp/flipt-engine-ffi-iOS-aarch64-sim
          tar -xzvf /tmp/flipt-engine-ffi-Darwin-aarch64.tar.gz -C /tmp/flipt-engine-ffi-Darwin-aarch64

      - name: Move Artifacts
        run: |
          mkdir -p build/xcframework/ios-arm64/Headers
          mkdir -p build/xcframework/ios-arm64-simulator/Headers
          mkdir -p build/xcframework/macos-arm64/Headers

          mv /tmp/flipt-engine-ffi-iOS-aarch64/target/aarch64-apple-ios/release/libfliptengine.a \
             build/xcframework/ios-arm64/
          mv /tmp/flipt-engine-ffi-iOS-aarch64-sim/target/aarch64-apple-ios-sim/release/libfliptengine.a \
             build/xcframework/ios-arm64-simulator/
          mv /tmp/flipt-engine-ffi-Darwin-aarch64/target/aarch64-apple-darwin/release/libfliptengine.a \
             build/xcframework/macos-arm64/

          for platform in ios-arm64 ios-arm64-simulator macos-arm64; do
            cp flipt-engine-ffi/include/flipt_engine.h build/xcframework/${platform}/Headers/
            cp flipt-engine-ffi/include/module.modulemap build/xcframework/${platform}/Headers/
          done

      - name: Xcode Build
        run: |
          rm -rf flipt-client-swift/Sources/FliptEngineFFI.xcframework

          xcodebuild -create-xcframework \
            -library "build/xcframework/ios-arm64/libfliptengine.a" \
            -headers "build/xcframework/ios-arm64/Headers" \
            -library "build/xcframework/ios-arm64-simulator/libfliptengine.a" \
            -headers "build/xcframework/ios-arm64-simulator/Headers" \
            -library "build/xcframework/macos-arm64/libfliptengine.a" \
            -headers "build/xcframework/macos-arm64/Headers" \
            -output "flipt-client-swift/Sources/FliptEngineFFI.xcframework"

      - name: "Debug: List xcframework contents"
        run: ls -lR flipt-client-swift/Sources/FliptEngineFFI.xcframework

      - name: Run Flipt
        env:
          FLIPT_STORAGE_TYPE: "local"
          FLIPT_STORAGE_LOCAL_PATH: "./test/fixtures/testdata"
          FLIPT_AUTHENTICATION_REQUIRED: true
          FLIPT_AUTHENTICATION_METHODS_TOKEN_ENABLED: true
          FLIPT_AUTHENTICATION_METHODS_TOKEN_BOOTSTRAP_TOKEN: "secret"
        run: flipt&

      - name: Wait for Flipt to be ready
        run: |
          while ! curl -s http://0.0.0.0:8080/health | grep -q "SERVING"; do
            echo "Waiting for Flipt to be ready..."
            sleep 1
          done

      - name: Run Integration Tests
        env:
          FLIPT_URL: "http://0.0.0.0:8080"
          FLIPT_AUTH_TOKEN: "secret"
        run: |
          cd ./flipt-client-swift
          swift test

      - name: (Fail-only) Upload the build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: ./flipt-client-swift/.build/reports

      - name: Update Status Check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.workflow_run ? context.payload.workflow_run.head_sha : context.sha;
            const { owner, repo } = context.repo;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              context: 'Swift SDK Tests',
              description: '${{ job.status }}' === 'success' ? 'Tests passed' : 'Tests failed',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });

  test-prebuilt:
    name: Integration Tests (Released Engine)
    runs-on: macos-14
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag != '' }}
    timeout-minutes: 20
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4

      - name: Install Flipt
        uses: flipt-io/setup-action@v0.4.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Prebuilt Engine
        run: |
          curl -L -o /tmp/flipt-engine-ffi-Darwin-aarch64.tar.gz \
            https://github.com/flipt-io/flipt-client-sdks/releases/download/flipt-engine-ffi-${{ github.event.inputs.release_tag }}/flipt-engine-ffi-Darwin-aarch64.tar.gz

          curl -L -o /tmp/flipt-engine-ffi-iOS-aarch64.tar.gz \
            https://github.com/flipt-io/flipt-client-sdks/releases/download/flipt-engine-ffi-${{ github.event.inputs.release_tag }}/flipt-engine-ffi-iOS-aarch64.tar.gz

          curl -L -o /tmp/flipt-engine-ffi-iOS-aarch64-sim.tar.gz \
            https://github.com/flipt-io/flipt-client-sdks/releases/download/flipt-engine-ffi-${{ github.event.inputs.release_tag }}/flipt-engine-ffi-iOS-aarch64-sim.tar.gz

      - name: Extract Artifacts
        run: |
          mkdir -p /tmp/flipt-engine-ffi-Darwin-aarch64
          mkdir -p /tmp/flipt-engine-ffi-iOS-aarch64
          mkdir -p /tmp/flipt-engine-ffi-iOS-aarch64-sim

          tar -xzvf /tmp/flipt-engine-ffi-Darwin-aarch64.tar.gz -C /tmp/flipt-engine-ffi-Darwin-aarch64
          tar -xzvf /tmp/flipt-engine-ffi-iOS-aarch64.tar.gz -C /tmp/flipt-engine-ffi-iOS-aarch64
          tar -xzvf /tmp/flipt-engine-ffi-iOS-aarch64-sim.tar.gz -C /tmp/flipt-engine-ffi-iOS-aarch64-sim

      - name: Move Artifacts
        run: |
          mkdir -p build/xcframework/ios-arm64/Headers
          mkdir -p build/xcframework/ios-arm64-simulator/Headers
          mkdir -p build/xcframework/macos-arm64/Headers

          mv /tmp/flipt-engine-ffi-iOS-aarch64/target/aarch64-apple-ios/release/libfliptengine.a \
             build/xcframework/ios-arm64/
          mv /tmp/flipt-engine-ffi-iOS-aarch64-sim/target/aarch64-apple-ios-sim/release/libfliptengine.a \
             build/xcframework/ios-arm64-simulator/
          mv /tmp/flipt-engine-ffi-Darwin-aarch64/target/aarch64-apple-darwin/release/libfliptengine.a \
             build/xcframework/macos-arm64/

          for platform in ios-arm64 ios-arm64-simulator macos-arm64; do
            cp flipt-engine-ffi/include/flipt_engine.h build/xcframework/${platform}/Headers/
            cp flipt-engine-ffi/include/module.modulemap build/xcframework/${platform}/Headers/
          done

      - name: Xcode Build
        run: |
          rm -rf flipt-client-swift/Sources/FliptEngineFFI.xcframework

          xcodebuild -create-xcframework \
            -library "build/xcframework/ios-arm64/libfliptengine.a" \
            -headers "build/xcframework/ios-arm64/Headers" \
            -library "build/xcframework/ios-arm64-simulator/libfliptengine.a" \
            -headers "build/xcframework/ios-arm64-simulator/Headers" \
            -library "build/xcframework/macos-arm64/libfliptengine.a" \
            -headers "build/xcframework/macos-arm64/Headers" \
            -output "flipt-client-swift/Sources/FliptEngineFFI.xcframework"

      - name: "Debug: List xcframework contents"
        run: ls -lR flipt-client-swift/Sources/FliptEngineFFI.xcframework

      - name: Run Flipt
        env:
          FLIPT_STORAGE_TYPE: "local"
          FLIPT_STORAGE_LOCAL_PATH: "./test/fixtures/testdata"
          FLIPT_AUTHENTICATION_REQUIRED: true
          FLIPT_AUTHENTICATION_METHODS_TOKEN_ENABLED: true
          FLIPT_AUTHENTICATION_METHODS_TOKEN_BOOTSTRAP_TOKEN: "secret"
        run: flipt&

      - name: Wait for Flipt to be ready
        run: |
          while ! curl -s http://0.0.0.0:8080/health | grep -q "SERVING"; do
            echo "Waiting for Flipt to be ready..."
            sleep 1
          done

      - name: Run Integration Tests
        env:
          FLIPT_URL: "http://0.0.0.0:8080"
          FLIPT_AUTH_TOKEN: "secret"
        run: |
          cd ./flipt-client-swift
          swift test

      - name: (Fail-only) Upload the build reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: ./flipt-client-swift/.build/reports

      - name: Update Status Check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.workflow_run ? context.payload.workflow_run.head_sha : context.sha;
            const { owner, repo } = context.repo;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              context: 'Swift SDK Tests',
              description: '${{ job.status }}' === 'success' ? 'Tests passed' : 'Tests failed',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });
