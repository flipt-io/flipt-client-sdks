name: Package FFI Engine (Linux)
on:
  pull_request:
    branches: [main]
  push:
    tags: ["flipt-engine-ffi-v**"]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag (e.g. v0.1.0)"
        required: true

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux-x86_64
            target: x86_64-unknown-linux-gnu
            use_cross: false

          - name: Linux-arm64
            target: aarch64-unknown-linux-gnu
            use_cross: true

          - name: Linux-x86_64-musl
            target: x86_64-unknown-linux-musl
            use_cross: true

          - name: Linux-arm64-musl
            target: aarch64-unknown-linux-musl
            use_cross: true

          - name: Android-arm64
            target: aarch64-linux-android
            arch: arm64-v8a

          - name: Android-x86_64
            target: x86_64-linux-android
            arch: x86_64

    runs-on: ubuntu-22.04
    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
          override: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: linux-${{ matrix.platform.target}}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up QEMU
        if: matrix.platform.use_cross
        uses: docker/setup-qemu-action@v3

      - name: Install cross
        if: matrix.platform.use_cross
        run: |
          which cross || cargo install cross --git https://github.com/cross-rs/cross
          echo "CROSS_NO_WARNINGS=0" >> $GITHUB_ENV

      - name: Install cargo-ndk
        if: endsWith(matrix.platform.target, '-android')
        run: cargo install --force cargo-ndk

      - name: Set RUSTFLAGS (MUSL)
        if: endsWith(matrix.platform.target, '-musl')
        run: echo "RUSTFLAGS=-C target-feature=-crt-static" >> $GITHUB_ENV

      - name: Build
        if: ${{ !endsWith(matrix.platform.target, '-android') }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p flipt-engine-ffi --target ${{ matrix.platform.target }} --release
          use-cross: ${{ matrix.platform.use_cross }}

      - name: Build (Android)
        if: endsWith(matrix.platform.target, '-android')
        uses: actions-rs/cargo@v1
        with:
          command: ndk
          args: --platform 30 --target ${{ matrix.platform.arch }} build --release

      - name: Strip
        if: matrix.platform.name == 'Linux-x86_64'
        run: strip -x target/${{ matrix.platform.target }}/release/libfliptengine.so

      - name: Package
        run: |
          tar -czvf flipt-engine-ffi-${{ matrix.platform.name }}.tar.gz \
            target/${{ matrix.platform.target }}/release/libfliptengine.* \
            || true

      - name: Upload Artifact (Pull Request)
        uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request'
        with:
          name: flipt-engine-ffi-${{ matrix.platform.name }}.tar.gz
          path: flipt-engine-ffi-${{ matrix.platform.name }}.tar.gz
          retention-days: 1

      - name: Upload Release Assets (Tag)
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/flipt-engine-ffi-v')
        with:
          tag_name: ${{ github.ref_name }}
          files: flipt-engine-ffi-${{ matrix.platform.name }}.tar.gz

      - name: Upload Release Assets (Workflow Dispatch)
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'workflow_dispatch' && !endswith(github.event.inputs.tag, 'pre')
        with:
          tag_name: flipt-engine-ffi-${{ github.event.inputs.tag }}
          files: flipt-engine-ffi-${{ matrix.platform.name }}.tar.gz 

  notify:
    runs-on: ubuntu-latest
    needs: build
    env:
      FLIPT_RELEASE_BOT_APP_ID: ${{ secrets.FLIPT_RELEASE_BOT_APP_ID }}
      FLIPT_RELEASE_BOT_APP_PEM: ${{ secrets.FLIPT_RELEASE_BOT_APP_PEM }}
      FLIPT_RELEASE_BOT_INSTALLATION_ID: ${{ secrets.FLIPT_RELEASE_BOT_INSTALLATION_ID }}
    if: github.repository == 'flipt-io/flipt-client-sdks'
    steps:
      - name: Generate token
        id: generate_token
        if: env.FLIPT_RELEASE_BOT_APP_ID != '' && env.FLIPT_RELEASE_BOT_APP_PEM != '' && env.FLIPT_RELEASE_BOT_INSTALLATION_ID != ''
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ env.FLIPT_RELEASE_BOT_APP_ID }}
          private_key: ${{ env.FLIPT_RELEASE_BOT_APP_PEM }}
          installation_id: ${{ env.FLIPT_RELEASE_BOT_INSTALLATION_ID }}

      - name: Trigger Test Android SDK
        if: steps.generate_token.outputs.token != ''
        run: |
          curl -X POST -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/flipt-io/flipt-client-sdks/actions/workflows/test-android-sdk.yml/dispatches \
            -d '{"ref":"${{ github.head_ref }}", "inputs":{"caller_run_id":"${{ github.run_id }}"}}'
