name: Package FFI Engine (iOS)
on:
  workflow_dispatch:
    inputs:
      tag:
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.FLIPT_RELEASE_BOT_APP_ID }}
          private_key: ${{ secrets.FLIPT_RELEASE_BOT_APP_PEM }}
          installation_id: ${{ secrets.FLIPT_RELEASE_BOT_INSTALLATION_ID }}

      - name: Get Release Asset URL (iOS arm64)
        id: get_asset_url_arm64
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data } = await github.rest.repos.listReleaseAssets({
              owner,
              repo,
              release_id: '${{ inputs.tag }}'
            });
            const asset = data.find(asset => asset.name === 'flipt-engine-ffi-iOS-aarch64.tar.gz');
            if (!asset) {
              throw new Error('Asset not found');
            }
            core.setOutput('url', asset.url);

      - name: Get Release Asset URL (iOS arm64 sim)
        id: get_asset_url_arm64_sim
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data } = await github.rest.repos.listReleaseAssets({
              owner,
              repo,
              release_id: '${{ inputs.tag }}'
            });
            const asset = data.find(asset => asset.name === 'flipt-engine-ffi-iOS-aarch64-sim.tar.gz');
            if (!asset) {
              throw new Error('Asset not found');
            }
            core.setOutput('url', asset.url);

      - name: Download Asset (iOS arm64)
        run: |
          curl -L \
            -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
            -H "Accept: application/octet-stream" \
            "${{ steps.get_asset_url_arm64.outputs.url }}" \
            -o /tmp/flipt-engine-ffi-iOS-aarch64.tar.gz

      - name: Download Asset (iOS arm64 sim)
        run: |
          curl -L \
            -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
            -H "Accept: application/octet-stream" \
            "${{ steps.get_asset_url_arm64_sim.outputs.url }}" \
            -o /tmp/flipt-engine-ffi-iOS-aarch64-sim.tar.gz

      - name: Extract Artifacts
        run: |
          mkdir -p /tmp/flipt-engine-ffi-iOS-aarch64
          mkdir -p /tmp/flipt-engine-ffi-iOS-aarch64-sim

          tar -xzvf /tmp/flipt-engine-ffi-iOS-aarch64.tar.gz -C /tmp/flipt-engine-ffi-iOS-aarch64
          tar -xzvf /tmp/flipt-engine-ffi-iOS-aarch64-sim.tar.gz -C /tmp/flipt-engine-ffi-iOS-aarch64-sim

      - name: Move Artifacts
        run: |
          mkdir -p build/xcframework/ios-arm64/Headers
          mkdir -p build/xcframework/ios-arm64-simulator/Headers

          mv /tmp/flipt-engine-ffi-iOS-aarch64/target/aarch64-apple-ios/release/libfliptengine.a \
             build/xcframework/ios-arm64/
          mv /tmp/flipt-engine-ffi-iOS-aarch64-sim/target/aarch64-apple-ios-sim/release/libfliptengine.a \
             build/xcframework/ios-arm64-simulator/

          for platform in ios-arm64 ios-arm64-simulator; do
            cp flipt-engine-ffi/include/flipt_engine.h build/xcframework/${platform}/Headers/
            cp flipt-engine-ffi/include/module.modulemap build/xcframework/${platform}/Headers/
          done

      - name: Xcode Build
        run: |
          mkdir -p tmp/Sources

          xcodebuild -create-xcframework \
            -library "build/xcframework/ios-arm64/libfliptengine.a" \
            -headers "build/xcframework/ios-arm64/Headers" \
            -library "build/xcframework/ios-arm64-simulator/libfliptengine.a" \
            -headers "build/xcframework/ios-arm64-simulator/Headers" \
            -output "tmp/Sources/FliptEngineFFI.xcframework"

      - name: Upload Release Assets (Tag)
        uses: softprops/action-gh-release@v2
        if: startsWith(inputs.tag, 'flipt-engine-ffi-v')
        with:
          tag_name: ${{ inputs.tag }}
          files: tmp/Sources/FliptEngineFFI.xcframework
